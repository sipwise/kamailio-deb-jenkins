#!/bin/bash
# Purpose: generate Debian source package based on project's git repository
# schema:
# $debian_dir: and one directory for every distribution
# $debian_auto_version: how the automatic version is created
# $tagbase: tag to use for git describe
cd source

# debug info
env

# defaults
build_tag=false
TAG=unknown
BASE_DIR=${debian_dir:-"pkg/kamailio/deb"}
distribution=${distribution:-unknown}
BUILD_NUMBER=${BUILD_NUMBER:-0}

if [ -n "$GIT_BRANCH" ] ; then
  # support both
  case "$GIT_BRANCH" in
    origin/tags/*)
      build_tag=true
      TAG=${GIT_BRANCH#origin/tags/}
      ;;
    refs/tags/*)
      build_tag=true
      TAG=${GIT_BRANCH#refs/tags/}
      ;;
  esac
fi

if [ ! -d "$BASE_DIR" ]; then
  echo 'No $BASE_DIR found on source'
  exit 1
fi

git clean -fxd

if [ ! -d "${BASE_DIR}/${distribution}" ]; then
  echo "${distribution} not supported"
  exit 1
fi

rm -rf debian
cp -a "${BASE_DIR}/${distribution}" debian

export DEBEMAIL="Jenkins Sipwise <jenkins@sipwise.com>"

if "$build_tag" ; then
  echo "*** Building a tagged version (${TAG}).***"
  dch -b --distribution="${distribution}" \
    --newversion="${TAG}" \
    -- "Automated package build for tag $TAG and distribution $distribution."
else
  VERSION=$(dpkg-parsechangelog --count 1 | awk '/^Version/ {print $2}')
  DISTRIBUTION=$(dpkg-parsechangelog --count 1 | awk '/^Distribution/ {print $2}')
  case "$DISTRIBUTION" in
   UNRELEASED) echo "*** UNRELEASED detected, use ${VERSION}" ;;
   *)
    if [ "${GIT_BRANCH}" != "origin/master" ]; then
      # use next point version instead, this is a nightly build
      # if we have A.B.C as ORIG_VERSION we should use A.B.C+1 instead
      [[ ${VERSION} =~ ([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]
      NEXT=${BASH_REMATCH[3]}
      (( NEXT++ ))
      VERSION="${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${NEXT}"
      echo "*** branch build detected, next version is ${VERSION}"
    fi
    ;;
  esac
  TIMESTAMP="$(date -u +%Y%m%d%H%M%S)"
  if [[ "${VERSION}" =~ ~dev[0-9]+ ]] ; then
    echo "*** dev version detected ***"
    AUTO_VERSION="${VERSION}+${TIMESTAMP}.${BUILD_NUMBER}"
  else
    AUTO_VERSION="${VERSION}~${TIMESTAMP}.${BUILD_NUMBER}"
  fi
  echo "*** Building version ${AUTO_VERSION} for ${distribution}.***"
  dch -b --distribution="${distribution}" \
    --newversion="${AUTO_VERSION}" \
    -- "Automated package build."
fi

dpkg-buildpackage -uc -us -nc -d -S -i -I --source-option=--unapply-patches
